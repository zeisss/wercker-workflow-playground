box: php

build:
  steps:
    - install-packages:
        packages: git
    - script:
        name: install composer
        code: curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
    - script:
        name: install dependencies
        code: |-
          composer install --no-interaction
    - script:
        name: copy files to pkg/
        code: |
            mkdir -p $WERCKER_OUTPUT_DIR/pkg/wercker-playground
            cp -r *.php vendor $WERCKER_OUTPUT_DIR/pkg/wercker-playground

            echo "Branch: $WERCKER_GIT_BRANCH" > $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO
            echo "Commit: $WERCKER_GIT_COMMIT" >> $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO
            echo "CI: $CI" >> $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO
            echo "WerckerStartedBy: $WERCKER_STARTED_BY" >> $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO
            echo "WerckerApplicationUrl: $WERCKER_APPLICATION_URL" >> $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO
            echo "WerckerBuildUrl: $WERCKER_BUILD_URL" >> $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO

            debug "$(cat $WERCKER_OUTPUT_DIR/pkg/wercker-playground/INFO)"

    - yudai/targz@0.2.1:
      input: $WERCKER_OUTPUT_DIR/pkg
      output: $WERCKER_OUTPUT_DIR/dist
    - script:
       name: show hash sums
       code: |
           info "$(cat $WERCKER_OUTPUT_DIR/dist/SHASUMS)"
           setMessage "SHA1: $(cat $WERCKER_OUTPUT_DIR/dist/SHASUMS)"

#    - zeisss/mfs-upload@0.1.3:
#        url: $FS_ENDPOINT
#        file: $WERCKER_OUTPUT_DIR/dist/wercker-playground.tar.gz
#        path: /artifacts/wercker-playground/${WERCKER_GIT_BRANCH}-${WERCKER_GIT_COMMIT}/wercker-playground.tar.gz
#        username: $FS_USER
#        password: $FS_PASSWORD
#        acl: public-read
deploy:
    steps:
#      - script:
#          name: Deploy artifact
#          code: |
#              site_name=${DEPLOY_SITENAME:-wercker-playground}
#              desired_version="${WERCKER_GIT_BRANCH}-${WERCKER_GIT_COMMIT}"
#
#              test -z "$DEPLOY_TOKEN" && fail "Env DEPLOY_TOKEN missing."
#
#              deployResult=$(curl -H"Authorization: bearer ${DEPLOY_TOKEN}" "${DEPLOY_ENDPOINT}" --data-urlencode "site=${site_name}" --data-urlencode "desired_version=${desired_version}" --output $WERCKER_REPORT_ARTIFACTS_DIR/deploy.json -w '%{http_code}')
#              if [ "$deployResult" -eq 200 ]; then
#                success "Deploy completed."
#              else
#                fail "$(cat $WERCKER_REPORT_ARTIFACTS_DIR/deploy.json)"
#              fi
    testing-agent:
      - dlapiduz/github-create-deployment:
          environment: testing
          token: $GITHUB_TOKEN
          auto-merge: false
          description: Automated wercker deployment

#    after-steps:
#      - wercker/slack-notifier@1.2.1:
#          url: $DEPLOY_SLACK_URL
